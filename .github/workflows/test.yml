name: Run All Tests
on:
  pull_request:
    branches: [develop]
    types: [opened, reopened, synchronize]
  workflow_dispatch:
jobs:
  info:
    name: Gather info for jobs
    timeout-minutes: 1
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.target_branch.outputs.branch }}
      changed_deps: ${{ steps.changed_deps.outputs.any_changed }}
      env_name: ${{ steps.environment.outputs.name }}
    steps:
      - name: Get target branch
        run: |
          branch=${{ github.event.pull_request.base.ref }}
          echo "branch=${branch}" >> $GITHUB_OUTPUT

          echo "::group::Branch"
          echo 'environment: '${branch}
          echo "::endgroup::"
        id: target_branch

      - name: Get environment
        run: |
          env=dev
          if [ "${{ steps.target_branch.outputs.name }}" = "main" ]
          then
            env=prod
          fi
          echo "name=${env}" >> $GITHUB_OUTPUT

          echo "::group::Environment"
          echo 'environment: '${env}
          echo "::endgroup::"
        id: environment

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed dependency files
        id: changed_deps
        uses: tj-actions/changed-files@v39
        with:
          files: |
            package.json
            yarn.lock

      - name: Did Deps Change
        run: |
          echo "::group::Changes"
          echo 'Changed?: '${{ steps.changed_deps.outputs.any_changed }}
          echo "::endgroup::"

  # build_dep_image:
  #   name: Build dependency image
  #   needs: [info]
  #   if: needs.info.outputs.changed_deps == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Build and push Docker image
  #       env:
  #         CI_PROJECT_NAME: "${{ github.repository }}/${{ github.event.pull_request.head.ref }}"
  #         CONTAINER_NAME: "${{ env.CI_REGISTRY_IMAGE }}:deps"
  #         LATEST_NAME: "${{ env.CI_REGISTRY_IMAGE }}:deps-${{ needs.info.outputs.branch }}-latest"
  #       run: |
  #         docker compose build deps;
  #         sudo docker build --build-arg R_VERSION=${R_VERSION} --cache-from ${LATEST_NAME} --tag ${CONTAINER_NAME} --tag ${LATEST_NAME} .
  #         sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
  #         sudo docker push ${CONTAINER_NAME}
  #         sudo docker push $LATEST_NAME;

  test:
    name: Lint and test
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [info]
    environment:
      name: ${{ needs.info.outputs.env_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node JS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION || 'latest' }}
          cache: 'yarn'

      - name: Install dependencies
        run: |
          echo "::group::Node version"
          echo 'node version requested: ${{ vars.NODE_VERSION || 'latest' }}'
          echo 'node version: '$(node --version)
          echo "::endgroup::"

          version=$(yarn --version)
          requested_version=${{ vars.YARN_VERSION || 'latest' }}

          if [ version != requested_version ]
          then
            yarn set version ${requested_version}
          fi

          echo "::group::Yarn version"
          echo 'initial yarn version: '${version}
          echo 'yarn version requested: '${requested_version}
          echo 'yarn version: '$(yarn --version)
          echo "::endgroup::"

          yarn install --immutable

      - name: Lint project
        env:
          WP_DOMAIN: ${{ vars.WP_DOMAIN }}
          WP_API_URL: http://${{ vars.WP_DOMAIN }}
          GRAPHQL_URL: http://${{ vars.WP_DOMAIN }}/graphql
        run: yarn lint

      - name: Run Jest
        env:
          WP_DOMAIN: ${{ vars.WP_DOMAIN }}
          WP_API_URL: http://${{ vars.WP_DOMAIN }}
          GRAPHQL_URL: http://${{ vars.WP_DOMAIN }}/graphql
        run: yarn test:unit

      # - name: Run Playwright tests
      #   run: yarn test:e2e
